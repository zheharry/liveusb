#!/bin/sh
# https://www.hiroom2.com/2016/06/10/ubuntu-16-04-create-customized-livedvd/
# https://gist.github.com/jamiekurtz/26c46b3e594f8cdd453a
# https://www.aioboot.com/en/install-grub2-from-windows/

# 1 Install packages for creating LiveDVD
sudo -E apt install -y livecd-rootfs libguestfs-tools systemd-container xorriso

# 2 Create rootfs
mkdir -p live-build/chroot
cd live-build
cp -a /usr/share/livecd-rootfs/live-build/auto .
cp -a /usr/share/livecd-rootfs/live-build/ubuntu-core .

PROJECT=ubuntu-core lb config --apt-http-proxy $http_proxy
sed -i 's/precise/xenial/g' config/bootstrap
# "Apt chroot update" didn't honor apt proxy setting, why?
sed -i 's/minimal/standard/g' config/bootstrap

sudo -E lb build

# 3 Customize rootfs
sudo cp /etc/apt/sources.list chroot/etc/apt/
sudo rm chroot/etc/resolv.conf
echo "ubuntu-live" | sudo tee chroot/etc/hostname
echo "127.0.0.1 ubuntu-live localhost" | sudo tee chroot/etc/hosts
echo "root:qwer1234" | sudo chpasswd --root `pwd`/chroot
echo "msr" | sudo tee -a chroot/etc/modules
echo "auto enx001060b1dcc4" | sudo tee -a /etc/network/interfaces
echo "	iface enx001060b1dcc4 inet dhcp" | sudo tee -a /etc/network/interfaces
cat <<'EOF' | sudo tee -a chroot/root/.bashrc
USB=`mount | grep findiso | awk '{print $1}'`
MOUNTED=`mount | grep root/usb`
if [ "$USB" != "" ] && [ "$MOUNTED" == "" ]; then
    mount -o remount,rw $USB
    mkdir -p /root/usb
    mount $USB /root/usb
fi
EOF

# 3.1 performance tune

# 4 extra packages
sudo systemd-nspawn --setenv=http_proxy=$http_proxy -D chroot << EOF
apt update -y
apt build-dep qemu
apt install -y openssh-server net-tools nfs-common uml-utilities bridge-utils \
    live-boot live-boot-initramfs-tools grub2-common lvm2 \
    linux-image-4.4.0-96-generic linux-headers-4.4.0-96-generic \
    linux-image-4.4.0-96-lowlatency linux-headers-4.4.0-96-lowlatency \
    vim tree less e2fsprogs zip exfat-fuse exfat-utils ntfs-3g screen curl pkg-config libglib2.0-dev libguestfs-tools \
    git build-essential subversion flex bison byacc qemu-kvm automake autoconf python-six htop libnuma-dev libtool \
    numactl system-config-kickstart python-pykickstart libvirt-bin libssl-dev libcap-ng-dev libncap-dev libpcap-dev
echo -e "set timeout=3\n\
\n\
insmod all_video\n\
\n\
menuentry 'ubuntu-live' {\n\
  set isofile='/efi/iso/ubuntu-live.iso'\n\
  loopback loop \$isofile\n\
  linux /boot/vmlinuz-4.4.0-96-generic nmi_watchdog=0 isolcpus=4-15 boot=live console=tty1 console=ttyS0,115200 intel_iommu=off default_hugepagesz=1G hugepagesz=1G hugepages=64 quiet nohz_full=4-15 rcu_nocbs=4-15 intel_pstate=disable processor.max_cstate=0 intel_idele.max_cstate=0 \n\
  initrd /boot/initrd.img-4.4.0-96-generic\n\
}" > /boot/grub/grub.cfg
adduser user --gecos "First Last,RoomNumber,WorkPhone,HomePhone" --disabled-password
adduser user sudo
echo "user:qwer1234" | sudo chpasswd
mkdir -p .ssh; ssh-keygen -f .ssh/id_rsa -t rsa -N ''
EOF

# 4.1 USB Ether dongle hack
sudo cp ../AX88772C_772B_772A_760_772_178_LINUX_DRIVER_v4.20.0_Source.tar.gz chroot/root/
sudo systemd-nspawn -D chroot << EOF
tar zxf AX88772C_772B_772A_760_772_178_LINUX_DRIVER_v4.20.0_Source.tar.gz
cd AX88772C_772B_772A_760_772_178_LINUX_DRIVER_v4.20.0_Source
CURRENT=4.4.0-96-generic make
CURRENT=4.4.0-96-generic make install
cd ..
rm -rf AX88772C_772B_772A_760_772_178_LINUX_DRIVER_v4.20.0_Source*
echo mii >> /etc/modules
echo asix >> /etc/modules
EOF

# 5 dpdk/ovs/qemu/trex
cat <<'EOF' | sudo tee chroot/root/1-compile_all.sh
#!/bin/bash
DPDKVER="17.05.1"
OVSVER="2.8.1"
QEMUVER="2.9.0"
KVER="4.4.0-96-generic"
ROOTDIR=`pwd`

tar xf dpdk-${DPDKVER}.tar.xz
cd dpdk-stable-${DPDKVER}
sed -i 's/CONFIG_RTE_APP_TEST=y/CONFIG_RTE_APP_TEST=n/' config/common_linuxapp
sed -i 's/CONFIG_RTE_BUILD_COMBINE_LIBS=n/CONFIG_RTE_BUILD_COMBINE_LIBS=y/' config/common_linuxapp
sed -i 's/ROOTDIRS-y := lib drivers app/ROOTDIRS-y := lib drivers/' GNUmakefile
make install T=x86_64-native-linuxapp-gcc DESTDIR=install RTE_KERNELDIR=/usr/src/linux-headers-${KVER}

modprobe uio
insmod x86_64-native-linuxapp-gcc/kmod/igb_uio.ko
*tools/dpdk-devbind.py --bind=igb_uio b3:00.0
sleep 1
*tools/dpdk-devbind.py --bind=igb_uio b3:00.1
sleep 1

cd x86_64-native-linuxapp-gcc
EXTRA_CFLAGS="-Ofast" RTE_KERNELDIR=/usr/src/linux-headers-${KVER} make -j4
cd $ROOTDIR

tar zxf openvswitch-${OVSVER}.tar.gz
cd openvswitch-${OVSVER}
./boot.sh
./configure --with-dpdk=${ROOTDIR}/dpdk-stable-${DPDKVER}/x86_64-native-linuxapp-gcc CFLAGS="-Ofast"
make CFLAGS="-Ofast -march=native" -j4
make install
cd $ROOTDIR

tar xf qemu-${QEMUVER}.tar.xz
cd qemu-${QEMUVER}
./configure --target-list=x86_64-softmmu
make -j4
EOF

cat <<'EOF' | sudo tee chroot/root/2-start-ovs-dpdk.sh
#!/bin/bash

# terminate OVS
rm -rf /usr/local/var/run/openvswitch
rm -rf /usr/local/etc/openvswitch/
rm -f /tmp/conf.db

mkdir -p /usr/local/etc/openvswitch
mkdir -p /usr/local/var/run/openvswitch

# initialize new OVS database
ovsdb-tool create /usr/local/etc/openvswitch/conf.db /usr/local/share/openvswitch/vswitch.ovsschema

#start database server
ovsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \
             --remote=db:Open_vSwitch,Open_vSwitch,manager_options \
             --pidfile --detach --log-file

#initialize OVS database
ovs-vsctl --no-wait init

#start OVS with DPDK portion
export DB_SOCK=/usr/local/var/run/openvswitch/db.sock

ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true other_config:dpdk-lcore-mask=0x2 other_config:dpdk-socket-mem="2048" other_config:dpdk-file-prefix="ovs"

ovs-vswitchd unix:$DB_SOCK --pidfile --detach
EOF

cat <<'EOF' | sudo tee chroot/root/3-createports_4p_pvp_1pmd.sh
#!/bin/bash

#create OVS DPDK Bridge and add four physical NICs
ovs-vsctl add-br br0 -- set bridge br0 datapath_type=netdev

# physical ports
ovs-vsctl add-port br0 dpdk0 -- set Interface dpdk0 type=dpdk options:dpdk-devargs=0000:b3:00.0
ovs-vsctl add-port br0 dpdk1 -- set Interface dpdk1 type=dpdk options:dpdk-devargs=0000:b3:00.1
#ovs-vsctl add-port br0 dpdk2 -- set Interface dpdk2 type=dpdk options:dpdk-devargs=0000:b3:00.2
#ovs-vsctl add-port br0 dpdk3 -- set Interface dpdk3 type=dpdk options:dpdk-devargs=0000:b3:00.3
# vhost-user ports
ovs-vsctl add-port br0 vhost-user0 -- set Interface vhost-user0 type=dpdkvhostuser
ovs-vsctl add-port br0 vhost-user1 -- set Interface vhost-user1 type=dpdkvhostuser
ovs-vsctl add-port br0 vhost-user2 -- set Interface vhost-user2 type=dpdkvhostuser
ovs-vsctl add-port br0 vhost-user3 -- set Interface vhost-user3 type=dpdkvhostuser
ovs-vsctl show

#ovs-ofctl add-flow br0 in_port=2,dl_type=0x800,idle_timeout=0,action=output:1
#ovs-ofctl add-flow br0 in_port=1,dl_type=0x800,idle_timeout=0,action=output:2
ovs-ofctl add-flow br0 in_port=1,action=output:3
ovs-ofctl add-flow br0 in_port=4,action=output:5
ovs-ofctl add-flow br0 in_port=6,action=output:2
ovs-ofctl add-flow br0 in_port=2,action=output:6
ovs-ofctl add-flow br0 in_port=5,action=output:4
ovs-ofctl add-flow br0 in_port=3,action=output:1
ovs-ofctl dump-flows br0
EOF

cat <<'EOF' | sudo tee chroot/root/4-power_on_vm-vhost-user-2VM.sh
#!/bin/bash

declare -a core=('10,11' '12,13' '14,15' '16,17');
declare -a macid=('00:01:00:00:00:01' '00:02:00:00:00:02' '00:03:00:00:00:03' '00:04:00:00:00:04' '00:05:00:00:00:05' '00:06:00:00:00:06' '00:07:00:00:00:07' '00:08:00:00:00:08');
bra=virbr0
for ((num=0; num<=1; num++))
do
        p1=$((2*$num))
        p2=$((2*$num+1))
        vm=/root/usb/EFI/ISO/filesystem.qcow2
        vm_name=VM-"$num"
        vnc="$num"
        n1=tap$num
        mac1=00:00:14:42:04:2"$num"
        if [ ! -f $vm ];
        then
           echo "VM $vm not found!"
        else
           echo "VM $vm started! VNC: $vnc, net0: 192.168.122.$(($num+169))"
           tunctl -d $n1
           tunctl -t $n1
           brctl addif $bra $n1
           ifconfig $n1 0.0.0.0 up

           taskset -c "${core[$num]}"  ./qemu-2.9.0/x86_64-softmmu/qemu-system-x86_64 -m 4096 -smp 2,cores=2,threads=1,sockets=1 -cpu host -drive format=qcow2,file=$vm -rtc clock=host \
          -kernel /boot/vmlinuz-4.4.0-96-generic -initrd /boot/initrd.img-4.4.0-96-generic -append 'root=/dev/sda rw console=ttyS0 nmi_watchdog=0' \
          -enable-kvm -name $vm_name \
          -object memory-backend-file,id=mem,size=4096M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc \
          -net nic,model=e1000,netdev=eth0,macaddr=$mac1 \
          -netdev tap,ifname=$n1,id=eth0,script=no,downscript=no \
          -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/vhost-user"$p1" \
          -netdev type=vhost-user,id=net1,chardev=char1,vhostforce -device virtio-net-pci,netdev=net1,mac=${macid[$p1]},csum=off,gso=off,guest_tso4=off,guest_tso6=off,guest_ecn=off,mrg_rxbuf=off \
          -chardev socket,id=char2,path=/usr/local/var/run/openvswitch/vhost-user"$p2" \
          -netdev type=vhost-user,id=net2,chardev=char2,vhostforce -device virtio-net-pci,netdev=net2,mac=${macid[$p2]},csum=off,gso=off,guest_tso4=off,guest_tso6=off,guest_ecn=off,mrg_rxbuf=off \
          -vnc :$vnc -daemonize
        fi
done

echo "wait for 40s until VM boots..."
sleep 40
echo "done"

EOF

cat <<'EOF' | sudo tee chroot/root/5-prepare-vm.sh
#!/bin/bash

ssh-keyscan 192.168.122.169 >> .ssh/known_hosts
ssh-keyscan 192.168.122.170 >> .ssh/known_hosts

scp dpdk-16.07.2.tar.xz root@192.168.122.169:; ssh root@192.168.122.169 'tar xf dpdk-16.07.2.tar.xz; cd dpdk-stable-16.07.2; make install T=x86_64-native-linuxapp-gcc'
scp dpdk-16.07.2.tar.xz root@192.168.122.170:; ssh root@192.168.122.170 'tar xf dpdk-16.07.2.tar.xz; cd dpdk-stable-16.07.2; make install T=x86_64-native-linuxapp-gcc'

EOF

cat <<'EOF' | sudo tee -a chroot/etc/trex_cfg.yaml
- port_limit      : 2
  version         : 2
#List of interfaces. Change to suit your setup. Use ./dpdk_setup_ports.py -s to see available options
  interfaces    : ["b3:00.2","b3:00.3"] 
  limit_memory  : 2048
  prefix        : trex
  port_info       :  # Port IPs. Change to suit your needs. In case of loopback, you can leave as is.
          - ip         : 1.1.1.1
            default_gw : 2.2.2.2
          - ip         : 2.2.2.2
            default_gw : 1.1.1.1
EOF

# 6 Create ISO
sudo rm -rf iso/
mkdir -p iso/live
sudo cp -a chroot/boot iso/
sudo mksquashfs chroot iso/live/filesystem.squashfs
sudo grub-mkrescue -o ubuntu-live.iso iso

# 7 Create qcow2 image
# TODO hostname/workloads
sudo systemd-nspawn -D chroot << EOF
echo "ubuntu-vm" | tee /etc/hostname
echo 'uio' >> /etc/modules
echo "127.0.0.1 ubuntu-vm localhost" | tee /etc/hosts
apt remove -y --purge libvirt-bin qemu-kvm nfs-common git subversion libnuma-dev uml-utilities bridge-utils numactl system-config-kickstart python-pykickstart
sed -i 's/PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config
rm /root/*.sh
mv .ssh/id_rsa.pub .ssh/authorized_keys
rm .ssh/id_rsa
echo "auto ens3" >> /etc/network/interfaces
echo "	iface ens3 inet dhcp" >> /etc/network/interfaces
EOF

# 7.1 dpdk/pktgen/testcmd
cat <<'EOF' | sudo tee chroot/root/1-prepare_all.sh
#!/bin/bash
DPDKVER="16.07.2"
PKTGENVER="3.1.2"

sysctl -w net.ipv4.ip_forward=0
sysctl -w kernel.randomize_va_space=0
#rmmod igb_uio

echo 1024 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages
mount -t hugetlbfs -o pagesize=2M none /dev/hugepages

modprobe uio
cd dpdk-stable-${DPDKVER}
insmod x86_64-native-linuxapp-gcc/kmod/igb_uio.ko
*tools/dpdk-devbind.py --bind=igb_uio 00:04.0
sleep 1
*tools/dpdk-devbind.py --bind=igb_uio 00:05.0
sleep 1
cd ..

EOF

echo "creating qcow2 image ..."
sudo virt-make-fs --size=+800M --format=qcow2 chroot filesystem.qcow2
echo "done"

# 8 Finish
exit 0

# 999 backup

## Create USB stick
# grub-install.exe --boot-directory=D:\EFI --efi-directory=D:\ --removable

## T-rex interactive shell
cd /tmp; tar xf /root/usb/trex-latest.tar.gz
cd v2.31; ./t-rex-64 -i -c 2

## T-rex console
./trex-console
start -f stl/bench.py -m 100% --port 0 1 -t size=64,vm=cached
